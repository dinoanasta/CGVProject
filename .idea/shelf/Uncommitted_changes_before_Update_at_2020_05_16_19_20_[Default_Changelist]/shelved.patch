Index: Shoot/Level1/PhysiShoot.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function moveLaser (mouseCoords){\r\n    avatarHead.set(avatar.position.x, avatar.position.y +25, avatar.position.z-5);\r\n\r\n    rayx = mouseCoords.x*100;\r\n    rayy = mouseCoords.y*100;\r\n\r\n    rayDirection.set(rayx,rayy, -100).normalize();\r\n\r\n    //let direction = new THREE.Vector3().subVectors(rayDirection, avatarHead);\r\n\r\n    laser.position.copy(avatarHead);\r\n    laser.setDirection(rayDirection);\r\n    laser.setLength(200, 0, 0);\r\n}\r\n\r\nfunction onMouseMove(event){\r\n    mouseCoords.set(\r\n        (event.clientX / window.innerWidth) * 2 - 1,\r\n        -(event.clientY / window.innerHeight) * 2 + 1\r\n    );\r\n    moveLaser(mouseCoords);\r\n\r\n}\r\n\r\nlet numBalls = 0;\r\n\r\nfunction onMouseDown(event) {\r\n\r\n    if(numBalls < ammoCount){\r\n        let sound = document.getElementById(\"raygun\");\r\n        //sound.play();\r\n\r\n        mouseCoords.set(\r\n            (event.clientX / window.innerWidth) * 2 - 1,\r\n            -(event.clientY / window.innerHeight) * 2 + 1\r\n        );\r\n\r\n        let ballRadius = 3;\r\n\r\n        let ball = new Physijs.SphereMesh(\r\n            new THREE.SphereGeometry(ballRadius, 10, 10),\r\n            new THREE.MeshStandardMaterial({\r\n                map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/trippy2.jpeg'),\r\n            }),\r\n            10\r\n        )\r\n\r\n        avatarHead.set(avatar.position.x, avatar.position.y +25, avatar.position.z-5);\r\n\r\n        rayx = mouseCoords.x*100;\r\n        rayy = mouseCoords.y*100;\r\n\r\n        rayDirection.set(rayx,rayy, -100);\r\n\r\n        raycaster.set(avatarHead, rayDirection);\r\n\r\n        ball.castShadow = true;\r\n        ball.receiveShadow = true;\r\n\r\n        ball.position.copy(avatarHead);\r\n\r\n        scene.add(ball);\r\n\r\n        pos.copy( raycaster.ray.direction );\r\n        pos.multiplyScalar( 2 );\r\n        ball.setLinearVelocity( new THREE.Vector3( pos.x, pos.y, pos.z ) );\r\n\r\n        numBalls++;\r\n    }else{\r\n        alert(\"Out of ammo\");\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Shoot/Level1/PhysiShoot.js	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Shoot/Level1/PhysiShoot.js	(date 1589648531559)
@@ -4,13 +4,13 @@
     rayx = mouseCoords.x*100;
     rayy = mouseCoords.y*100;
 
-    rayDirection.set(rayx,rayy, -100).normalize();
+    rayDirection.set(rayx,rayy-40, -100).normalize();
 
     //let direction = new THREE.Vector3().subVectors(rayDirection, avatarHead);
 
     laser.position.copy(avatarHead);
     laser.setDirection(rayDirection);
-    laser.setLength(200, 0, 0);
+    laser.setLength(200, 0.00001, 0.00001);
 }
 
 function onMouseMove(event){
@@ -50,7 +50,7 @@
         rayx = mouseCoords.x*100;
         rayy = mouseCoords.y*100;
 
-        rayDirection.set(rayx,rayy, -100);
+        rayDirection.set(rayx,rayy - 40 , -100);
 
         raycaster.set(avatarHead, rayDirection);
 
Index: Shoot/Level1/PhysiAvatar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function createAvatar(){\r\n    let loader = new THREE.GLTFLoader();\r\n    loader.load(\r\n        \"../../Models/New Models/astronaut/scene.gltf\",\r\n        function (object) {\r\n            object.scene.traverse( function( object ) {\r\n                if ( object.isMesh ) {\r\n                    object.castShadow = true;\r\n                }\r\n            } );\r\n\r\n            avatar = object.scene.children[0];\r\n\r\n            avatar.position.set(0, 0, 80);\r\n            avatar.scale.set(7, -7, 7);\r\n\r\n            avatar.castShadow = true;\r\n            avatar.receiveShadow = true;\r\n            scene.add(avatar);\r\n        }\r\n    );\r\n}\r\n\r\nfunction moveAvatar(){\r\n    let moveX =  AvatarMoveDirection.x;\r\n    let moveZ =  AvatarMoveDirection.z;\r\n\r\n    if(moveX==1){\r\n        if(avatarLocalPos.x + moveX < movementBoundaries.rightX){\r\n            avatar.position.x += moveX;\r\n            avatarLocalPos.x += moveX;\r\n        }\r\n    }else if(moveX==-1 ){\r\n        if(avatarLocalPos.x + moveX > movementBoundaries.leftX) {\r\n            avatar.position.x += moveX;\r\n            avatarLocalPos.x += moveX\r\n        }\r\n    }else if(moveZ==-1){\r\n        if(avatarLocalPos.z + moveZ > movementBoundaries.frontZ) {\r\n            avatar.position.z += moveZ;\r\n            avatarLocalPos.z += moveZ;\r\n        }\r\n    }else if(moveZ==1){\r\n        if(avatarLocalPos.z + moveZ < movementBoundaries.backZ) {\r\n            avatar.position.z += moveZ;\r\n            avatarLocalPos.z += moveZ;\r\n        }\r\n    }\r\n\r\n    //avatar.position.set(avatar.position.x + moveX, avatar.position.y, avatar.position.z + moveZ);\r\n\r\n    //avatar.__dirtyPosition = true;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Shoot/Level1/PhysiAvatar.js	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Shoot/Level1/PhysiAvatar.js	(date 1589646926991)
@@ -46,8 +46,4 @@
             avatarLocalPos.z += moveZ;
         }
     }
-
-    //avatar.position.set(avatar.position.x + moveX, avatar.position.y, avatar.position.z + moveZ);
-
-    //avatar.__dirtyPosition = true;
 }
\ No newline at end of file
Index: Shoot/Level1/PhysiPlatform.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function createStallPlatform(){\r\n    let platformMat = new THREE.MeshStandardMaterial({\r\n        map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/neontexture1.jpg'),\r\n        //transparent: true,\r\n        //opacity: 0.9\r\n    });\r\n\r\n    //RandomGravityTester\r\n    let rand = new Physijs.BoxMesh(\r\n        new THREE.BoxGeometry(10,10,10),\r\n        new THREE.MeshStandardMaterial({\r\n            map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/redfoil.jpg'),\r\n        }),\r\n        10\r\n    );\r\n    rand.position.set(0, 50,-70);\r\n    rand.castShadow = true;\r\n    rand.receiveShadow = true;\r\n    scene.add(rand);\r\n    \r\n    // Base\r\n    let baseSize = {width: 100, height: 2, depth:200}\r\n    let base = new Physijs.BoxMesh(\r\n        new THREE.BoxGeometry(100, 2, 200),\r\n        platformMat,\r\n        0\r\n    );\r\n    //base.position.set(0,0,0);\r\n    base.castShadow = true;\r\n    base.receiveShadow = true;\r\n\r\n    //Shooter Barrier\r\n    let shooterBarrierSize = {width: 90, height: 10, depth:20};\r\n    let shooterBarrier = new Physijs.BoxMesh(\r\n        new THREE.BoxGeometry(90,10,20),\r\n        new THREE.MeshStandardMaterial({\r\n            map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/red.jpg'),\r\n        }),\r\n        0\r\n    );\r\n    shooterBarrier.position.set(0, shooterBarrierSize.height/2 + baseSize.height/2, 60);\r\n    shooterBarrier.castShadow = true;\r\n    shooterBarrier.receiveShadow = true;\r\n    base.add(shooterBarrier);\r\n\r\n    //Far\r\n    let farSize = {width: 100, height: 50, depth:5};\r\n    let far = new Physijs.BoxMesh(\r\n        new THREE.CubeGeometry(100,50,5),\r\n        platformMat,\r\n        0\r\n    )\r\n    far.position.set(0, farSize.height - farSize.height/2 + baseSize.height/2, farSize.depth - farSize.depth/2 - baseSize.depth/2);\r\n    far.castShadow = true;\r\n    far.receiveShadow = true;\r\n\r\n    //Near wall\r\n    let nearSize = {width: 100, height: 15, depth:5};\r\n    let near = new Physijs.BoxMesh(\r\n        new THREE.CubeGeometry(100,15,5),\r\n        platformMat,\r\n        0\r\n    )\r\n    near.position.set(0, nearSize.height/2 + baseSize.height/2, -nearSize.depth/2 + baseSize.depth/2);\r\n    near.castShadow = true;\r\n    near.receiveShadow = true;\r\n\r\n    //Left Panel\r\n    let leftSize = {width: 5, height: 50, depth:200};\r\n    let left = new Physijs.BoxMesh(\r\n        new THREE.CubeGeometry(5,50,200),\r\n        platformMat,\r\n        0\r\n    )\r\n    left.position.set(leftSize.width/2 - baseSize.width/2, leftSize.height/2 + baseSize.height/2, 0);\r\n    left.castShadow = true;\r\n    left.receiveShadow = true;\r\n\r\n    //Right Panel\r\n    let rightSize = {width: 5, height: 50, depth:200};\r\n    let right = new Physijs.BoxMesh(\r\n        new THREE.CubeGeometry(5,50,200),\r\n        platformMat,\r\n        0\r\n    )\r\n    right.position.set(-rightSize.width/2  + baseSize.width/2, rightSize.height/2 + baseSize.height/2, 0);\r\n    right.castShadow = true;\r\n    right.receiveShadow = true;\r\n\r\n    //Add all panels to base\r\n    base.add( far );\r\n    base.add(near);\r\n    base.add(left);\r\n    base.add(right);\r\n\r\n\r\n    //Add base to scene\r\n    scene.add(base);\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Shoot/Level1/PhysiPlatform.js	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Shoot/Level1/PhysiPlatform.js	(date 1589548465699)
@@ -34,7 +34,7 @@
     let shooterBarrier = new Physijs.BoxMesh(
         new THREE.BoxGeometry(90,10,20),
         new THREE.MeshStandardMaterial({
-            map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/red.jpg'),
+            map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/redfoil.jpg'),
         }),
         0
     );
@@ -93,7 +93,6 @@
     base.add(left);
     base.add(right);
 
-
     //Add base to scene
     scene.add(base);
 
Index: Shoot/Level1/PhysiMain.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nPhysijs.scripts.worker = '../../js/physijs_worker.js';\r\n//Physijs.scripts.ammo = '../../js/ammo.js';\r\n\r\n//Level Specific\r\nlet ammoCount = 10;\r\n\r\n//Scene and setup\r\nlet windowHalfX = window.innerWidth / 2;\r\nlet windowHalfY = window.innerHeight / 2;\r\nlet cubeMap;\r\n\r\nlet renderer, scene, camera, box;\r\n\r\nlet pos = new THREE.Vector3();\r\n\r\n//Mouse Coordinates and raycaster\r\nlet mouseCoords = new THREE.Vector2(),\r\n    raycaster = new THREE.Raycaster();\r\n\r\n//Gravity variables\r\nlet xDir, xStrength;\r\n\r\n//Avatar\r\nlet avatar;\r\nlet AvatarMoveDirection = { x: 0, z: 0 };\r\nlet movementBoundaries = {leftX : -40, rightX:40, frontZ: -10, backZ: 10};\r\nlet avatarLocalPos = {x:0, z:0};\r\n\r\n//Shooting\r\nlet ball;\r\nlet avatarHead = new THREE.Vector3();\r\nlet rayx, rayy;\r\nlet rayDirection = new THREE.Vector3();\r\nlet laser;\r\n\r\nfunction setupScene() {\r\n    scene = new Physijs.Scene;\r\n\r\n    //Set gravity:\r\n    //Random x gravity creates a \"wind\" like effect\r\n    let xGrav = Math.random() * 40 - 20;\r\n\r\n    scene.setGravity(new THREE.Vector3(xGrav, -9.8, 0));\r\n\r\n    if (xGrav > 0) {\r\n        xDir = \"right\";\r\n    } else if (xGrav < 0) {\r\n        xDir = \"left\";\r\n    }\r\n\r\n    if (Math.abs(xGrav) >= 14) {\r\n        xStrength = \"strong\";\r\n    } else if (Math.abs(xGrav) <= 6) {\r\n        xStrength = \"weak\";\r\n    } else if (Math.abs(xGrav) > 6 && Math.abs(xGrav) < 14) {\r\n        xStrength = \"average\";\r\n    }\r\n    console.log(xGrav, xDir, xStrength);\r\n\r\n    //Add camera\r\n    camera = new THREE.PerspectiveCamera(\r\n        60,\r\n        window.innerWidth / window.innerHeight,\r\n        0.5,\r\n        1000\r\n    );\r\n    camera.position.set(0, 60, 150);\r\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n    scene.add(camera);\r\n\r\n    //Add ambient light\r\n    let ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    //Add point light from camera\r\n    let camLight = new THREE.PointLight(0xffaaff, 0.5);\r\n    camLight.position.set(0, 60, 150);\r\n    camLight.castShadow = true;\r\n    camera.add(camLight);\r\n    camLight.shadow.mapSize.width = 512;  // default\r\n    camLight.shadow.mapSize.height = 512; // default\r\n    camLight.shadow.camera.near = 0.5;    // default\r\n    camLight.shadow.camera.far = 500;     // default\r\n\r\n    //Add point light from right\r\n    let rightLight = new THREE.PointLight(0xffaaff, 0.5);\r\n    rightLight.position.set(60, 80, 110);\r\n    rightLight.castShadow = true;\r\n    scene.add(rightLight);\r\n    rightLight.shadow.mapSize.width = 512;  // default\r\n    rightLight.shadow.mapSize.height = 512; // default\r\n    rightLight.shadow.camera.near = 0.5;    // default\r\n    rightLight.shadow.camera.far = 500;     // default\r\n\r\n    //Add point light from left\r\n    let leftLight = new THREE.PointLight(0xffaaff, 0.5);\r\n    leftLight.position.set(-60, 80, 110);\r\n    leftLight.castShadow = true;\r\n    scene.add(leftLight);\r\n    leftLight.shadow.mapSize.width = 512;  // default\r\n    leftLight.shadow.mapSize.height = 512; // default\r\n    leftLight.shadow.camera.near = 0.5;    // default\r\n    leftLight.shadow.camera.far = 500;     // default\r\n\r\n    //Add point light from directly above\r\n    let topLight = new THREE.PointLight(0xffaaff, 0.3);\r\n    topLight.position.set(0, 100, 0);\r\n    topLight.castShadow = true;\r\n    scene.add(topLight);\r\n    topLight.shadow.mapSize.width = 512;  // default\r\n    topLight.shadow.mapSize.height = 512; // default\r\n    topLight.shadow.camera.near = 0.5;    // default\r\n    topLight.shadow.camera.far = 500;     // default\r\n\r\n    //Add laser like aiming helper\r\n    laser = new THREE.ArrowHelper(new THREE.Vector3(0,0,-50), avatarHead,30, 0xff0000, 0, 0 );\r\n    scene.add( laser );\r\n\r\n    //CubeMap\r\n    var textureURLs = [  // URLs of the six faces of the cube map\r\n        // right, left, top, bottom, front, back\r\n        \"../../Resources/CubeMaps/red/bkg3_right1.png\",   // Note:  The order in which\r\n        \"../../Resources/CubeMaps/red/bkg3_left2.png\",   //   the images are listed is\r\n        \"../../Resources/CubeMaps/red/bkg3_top3.png\",   //   important!\r\n        \"../../Resources/CubeMaps/red/bkg3_bottom4.png\",\r\n        \"../../Resources/CubeMaps/red/bkg3_front5.png\",\r\n        \"../../Resources/CubeMaps/red/bkg3_back6.png\"\r\n    ];\r\n    var materials = [];\r\n    for (var i = 0; i < 6; i++) {\r\n        var texture = new THREE.TextureLoader().load( textureURLs[i] );\r\n        materials.push( new THREE.MeshBasicMaterial( {\r\n            color: \"white\",  // Color will be multiplied by texture color.\r\n            side: THREE.BackSide,  // IMPORTANT: To see the inside of the cube, back faces must be rendered!\r\n            map: texture\r\n        } ) );\r\n\r\n    }\r\n    cubeMap = new THREE.Mesh(\r\n        new THREE.BoxGeometry(1000,1000,1000), materials );\r\n    scene.add(cubeMap);\r\n}\r\n\r\n\r\nfunction setupEventHandlers(){\r\n    window.addEventListener( 'keydown', handleKeyDown, false);\r\n    window.addEventListener( 'keyup', handleKeyUp, false);\r\n    window.addEventListener('mousedown', onMouseDown, false);\r\n    window.addEventListener('mousemove', onMouseMove, false);\r\n    window.addEventListener( 'resize', onWindowResize, false );\r\n}\r\n\r\nfunction handleKeyDown(event){\r\n    let keyCode = event.keyCode;\r\n    switch(keyCode){\r\n        //Avatar\r\n        case 87: //W: FORWARD\r\n            AvatarMoveDirection.z = -1\r\n            break;\r\n        case 83: //S: BACK\r\n            AvatarMoveDirection.z = 1\r\n            break;\r\n        case 65: //A: LEFT\r\n            AvatarMoveDirection.x = -1\r\n            break;\r\n        case 68: //: RIGHT\r\n            AvatarMoveDirection.x = 1\r\n            break;\r\n    }\r\n\r\n}\r\n\r\nfunction handleKeyUp(event){\r\n    let keyCode = event.keyCode;\r\n    switch(keyCode){\r\n        //Avatar\r\n        case 87: //↑: FORWARD\r\n            AvatarMoveDirection.z = 0\r\n            break;\r\n        case 83: //↓: BACK\r\n            AvatarMoveDirection.z = 0\r\n            break;\r\n        case 65: //←: LEFT\r\n            AvatarMoveDirection.x = 0\r\n            break;\r\n        case 68: //→: RIGHT\r\n            AvatarMoveDirection.x = 0\r\n            break;\r\n    }\r\n}\r\n\r\nfunction onWindowResize() {\r\n\r\n    windowHalfX = window.innerWidth / 2;\r\n    windowHalfY = window.innerHeight / 2;\r\n\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n\r\n    renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n}\r\n//\r\n// function animate(){\r\n//     requestAnimationFrame(animate);\r\n//     moveAvatar();\r\n//     moveLaser(mouseCoords);\r\n//     render();\r\n// }\r\n//\r\n// function render(){\r\n//      scene.simulate();\r\n//     renderer.render( scene, camera);\r\n// }\r\n\r\nfunction render() {\r\n    requestAnimationFrame(render);\r\n\r\n    moveAvatar();\r\n    moveLaser(mouseCoords);\r\n\r\n\r\n    scene.simulate();\r\n    renderer.render( scene, camera);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Shoot/Level1/PhysiMain.js	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Shoot/Level1/PhysiMain.js	(date 1589649308605)
@@ -3,16 +3,17 @@
 Physijs.scripts.worker = '../../js/physijs_worker.js';
 //Physijs.scripts.ammo = '../../js/ammo.js';
 
-//Level Specific
-let ammoCount = 10;
+
+
+//Levels
+let level = "1";
+let ammoCount; //Num of balls
+let goal;   //How many targets they have to hit to win
+let gameLength; //How long the game lasts
 
 //Scene and setup
-let windowHalfX = window.innerWidth / 2;
-let windowHalfY = window.innerHeight / 2;
 let cubeMap;
-
 let renderer, scene, camera, box;
-
 let pos = new THREE.Vector3();
 
 //Mouse Coordinates and raycaster
@@ -20,7 +21,8 @@
     raycaster = new THREE.Raycaster();
 
 //Gravity variables
-let xDir, xStrength;
+let xGrav, xDir, xStrength, maxGrav, minGrav, sign;
+let signs = [1, -1];
 
 //Avatar
 let avatar;
@@ -38,27 +40,6 @@
 function setupScene() {
     scene = new Physijs.Scene;
 
-    //Set gravity:
-    //Random x gravity creates a "wind" like effect
-    let xGrav = Math.random() * 40 - 20;
-
-    scene.setGravity(new THREE.Vector3(xGrav, -9.8, 0));
-
-    if (xGrav > 0) {
-        xDir = "right";
-    } else if (xGrav < 0) {
-        xDir = "left";
-    }
-
-    if (Math.abs(xGrav) >= 14) {
-        xStrength = "strong";
-    } else if (Math.abs(xGrav) <= 6) {
-        xStrength = "weak";
-    } else if (Math.abs(xGrav) > 6 && Math.abs(xGrav) < 14) {
-        xStrength = "average";
-    }
-    console.log(xGrav, xDir, xStrength);
-
     //Add camera
     camera = new THREE.PerspectiveCamera(
         60,
@@ -115,7 +96,7 @@
     topLight.shadow.camera.far = 500;     // default
 
     //Add laser like aiming helper
-    laser = new THREE.ArrowHelper(new THREE.Vector3(0,0,-50), avatarHead,30, 0xff0000, 0, 0 );
+    laser = new THREE.ArrowHelper(new THREE.Vector3(0,0,-200).normalize(), avatarHead,200, 0xff0000, 0.0001, 0.0001 );
     scene.add( laser );
 
     //CubeMap
@@ -155,6 +136,19 @@
 function handleKeyDown(event){
     let keyCode = event.keyCode;
     switch(keyCode){
+        //Level
+        case 49:
+            level = "1";
+            setLevel(level);
+            break;
+        case 50:
+            level = "2";
+            setLevel(level);
+            break;
+        case 51:
+            level = "3";
+            setLevel(level);
+            break;
         //Avatar
         case 87: //W: FORWARD
             AvatarMoveDirection.z = -1
@@ -192,10 +186,6 @@
 }
 
 function onWindowResize() {
-
-    windowHalfX = window.innerWidth / 2;
-    windowHalfY = window.innerHeight / 2;
-
     camera.aspect = window.innerWidth / window.innerHeight;
     camera.updateProjectionMatrix();
 
@@ -215,13 +205,93 @@
 //     renderer.render( scene, camera);
 // }
 
+function setLevel(lvl){
+  switch (lvl){
+      case "1": //Level 1
+          sign = signs[Math.floor(Math.random() * 2)];
+          console.log("Sign: " + sign);
+
+          console.log("Level: " + level);
+
+          ammoCount = 10;
+          goal = 5;
+          gameLength = 60;
+
+          maxGrav = 40;
+          minGrav = 20;
+
+          xGrav = sign * ((Math.random()*(maxGrav-minGrav)) + minGrav);
+
+          scene.setGravity(new THREE.Vector3(xGrav, -9.8, 0));
+
+          if (xGrav > 0) {
+              xDir = "right";
+          } else if (xGrav < 0) {
+              xDir = "left";
+          }
+
+          if (minGrav < Math.abs(xGrav) &&  Math.abs(xGrav) < 26) {
+              xStrength = "weak";
+          } else if (26 < Math.abs(xGrav) &&  Math.abs(xGrav) < 34) {
+              xStrength = "average";1
+          } else if (34 < Math.abs(xGrav) &&  Math.abs(xGrav) < maxGrav) {
+              xStrength = "strong";
+          }
+          console.log(xGrav, xDir, xStrength);
+          break;
+      case "2": //Level 2
+          console.log("Level: " + level);
+          xGrav = Math.random() * 40 - 20;
+
+          scene.setGravity(new THREE.Vector3(xGrav, -9.8, 0));
+
+          if (xGrav > 0) {
+              xDir = "right";
+          } else if (xGrav < 0) {
+              xDir = "left";
+          }
+
+          if (Math.abs(xGrav) >= 14) {
+              xStrength = "strong";
+          } else if (Math.abs(xGrav) <= 6) {
+              xStrength = "weak";
+          } else if (Math.abs(xGrav) > 6 && Math.abs(xGrav) < 14) {
+              xStrength = "average";
+          }
+          console.log(xGrav, xDir, xStrength);
+          break;
+
+      case "3":
+          console.log("Level: " + level);
+          xGrav = Math.random() * 40 - 20;
+
+          scene.setGravity(new THREE.Vector3(xGrav, -9.8, 0));
+
+          if (xGrav > 0) {
+              xDir = "right";
+          } else if (xGrav < 0) {
+              xDir = "left";
+          }
+
+          if (Math.abs(xGrav) >= 14) {
+              xStrength = "strong";
+          } else if (Math.abs(xGrav) <= 6) {
+              xStrength = "weak";
+          } else if (Math.abs(xGrav) > 6 && Math.abs(xGrav) < 14) {
+              xStrength = "average";
+          }
+          console.log(xGrav, xDir, xStrength);
+          break;
+  }
+
+}
+
 function render() {
     requestAnimationFrame(render);
 
     moveAvatar();
     moveLaser(mouseCoords);
 
-
     scene.simulate();
     renderer.render( scene, camera);
 }
\ No newline at end of file
Index: Stalls + Views/CGVProject.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Carnival</title>\r\n\r\n    <style>\r\n        body{\r\n            margin:0;\r\n            overflow: hidden;\r\n        }\r\n        canvas{\r\n            background: red;\r\n\r\n        }\r\n\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n    <canvas id = \"myCanvas\"></canvas>\r\n\r\n    <script src = \"js/three.js\"></script>\r\n    <script>\r\n\r\n\r\n\r\n        var renderer = new THREE.WebGLRenderer({canvas : document.getElementById('myCanvas'), antialias: true});\r\n        renderer.setClearColor(0x00ff00);\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(window.innerWidth,window.innerHeight -50);\r\n\r\n        var camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1,4000);\r\n        camera.position.z = 1000;\r\n\r\n        var scene = new THREE.Scene();\r\n\r\n        var light = new THREE.AmbientLight(0xffffff,0.5);\r\n        scene.add(light);\r\n\r\n        var light1 = new THREE.PointLight(0xffffff,0.5);\r\n        scene.add(light1);\r\n\r\n        var stall = makeStall();\r\n        stall.position.z = -300;\r\n        makeText();\r\n\r\n        var skeeball = makeBoard();\r\n        skeeball.scale.set(0.75,0.75,0.75);\r\n        stall.add(skeeball);\r\n\r\n\r\n        scene.add(stall);\r\n\r\n\r\n        requestAnimationFrame(render);\r\n\r\n        function render(){\r\n\r\n            //text.rotation.y += 0.01;\r\n            // Animating sphere 1\r\n\r\n            renderer.render(scene,camera);\r\n            requestAnimationFrame(render);\r\n        }\r\n\r\n        renderer.render(scene,camera);\r\n\r\n\r\n\r\n        function makeBoard(){\r\n\r\n            var geometry = new THREE.CubeGeometry(110,200,30);\r\n            var material = new THREE.MeshPhongMaterial({\r\n                color: 'silver'\r\n            });\r\n\r\n            var skeeball = new THREE.Mesh(geometry,material);\r\n\r\n            var cgeo3 = new THREE.CylinderGeometry(50,50,20,30);\r\n            var mgeo3 = new THREE.MeshBasicMaterial({\r\n                color: 'darkorchid'\r\n            });\r\n            var c3 = new THREE.Mesh(cgeo3,mgeo3);\r\n            c3.position.y = -35;\r\n            c3.position.z = 20;\r\n            c3.rotation.x = Math.PI/2;\r\n            skeeball.add(c3);\r\n\r\n            var cgeo = new THREE.CylinderGeometry(15,15,20,20);\r\n            var mgeo = new THREE.MeshBasicMaterial({\r\n                color: 'indigo'\r\n            });\r\n            var c = new THREE.Mesh(cgeo,mgeo);\r\n            c.position.z = 25;\r\n            c.rotation.x = Math.PI/2;\r\n            skeeball.add(c);\r\n\r\n            var cgeo1 = new THREE.CylinderGeometry(15,15,20,20);\r\n            var mgeo1 = new THREE.MeshBasicMaterial({\r\n                color: 'indigo'\r\n            });\r\n            var c1 = new THREE.Mesh(cgeo1,mgeo1);\r\n            c1.position.x = 30;\r\n            c1.position.y = 70;\r\n            c1.position.z = 25;\r\n            c1.rotation.x = Math.PI/2;\r\n            skeeball.add(c1);\r\n\r\n            var cgeo2 = new THREE.CylinderGeometry(15,15,20,20);\r\n            var mgeo2 = new THREE.MeshBasicMaterial({\r\n                color: 'indigo'\r\n            });\r\n            var c2 = new THREE.Mesh(cgeo1,mgeo1);\r\n            c2.position.x = -30;\r\n            c2.position.y = 70;\r\n            c2.position.z = 25;\r\n            c2.rotation.x = Math.PI/2;\r\n            skeeball.add(c2);\r\n\r\n            var cgeo4 = new THREE.CylinderGeometry(13,13,20,20);\r\n            var mgeo4 = new THREE.MeshBasicMaterial({\r\n                color: 'indigo'\r\n            });\r\n            var c4 = new THREE.Mesh(cgeo4,mgeo4);\r\n            c4.position.y = -35;\r\n            c4.position.z = 25;\r\n            c4.rotation.x = Math.PI/2;\r\n            skeeball.add(c4);\r\n\r\n            var cgeo5 = new THREE.CylinderGeometry(13,13,20,20);\r\n            var mgeo5 = new THREE.MeshBasicMaterial({\r\n                color: 'indigo'\r\n            });\r\n            var c5 = new THREE.Mesh(cgeo5,mgeo5);\r\n            c5.position.y = 35;\r\n            c5.position.z = 20;\r\n            c5.rotation.x = Math.PI/2;\r\n            skeeball.add(c5);\r\n            skeeball.position.y = -50;\r\n\r\n            var geo = new THREE.PlaneGeometry(110,300);\r\n            var mat = new THREE.MeshBasicMaterial({\r\n                color : 'silver'\r\n            });\r\n            var plane = new THREE.Mesh(geo,mat);\r\n            plane.position.y = -100;\r\n            //plane.position.x = -50;\r\n            plane.position.z = 200;\r\n            plane.rotation.x = -Math.PI/2.25;\r\n\r\n            skeeball.add(plane);\r\n            //skeeball.rotation.x = -Math.PI/6;\r\n\r\n            return skeeball;\r\n\r\n\r\n\r\n            //skeeball.rotation.x = -Math.PI/6;\r\n        }\r\n\r\n        function makeText(){\r\n\r\n            var loader = new THREE.FontLoader();\r\n\r\n            loader.load('js/droid_serif_bold.typeface.json',function (font) {\r\n                var geoText = new THREE.TextBufferGeometry( \"skeeball\" , {\r\n                    font : font,\r\n                    size : 30,\r\n                    height : 20,\r\n                    curveSegments: 16,\r\n                    bevelEnabled : true,\r\n                    bevelThickness: 5,\r\n                    bevelSize: 5,\r\n                    bevelOffset : 0,\r\n                    bevelSegments: 4\r\n\r\n                });\r\n\r\n                var matText = new THREE.MeshNormalMaterial({\r\n                    color : 'white'\r\n                })\r\n\r\n                var text = new THREE.Mesh(geoText,matText);\r\n                //geoText.computeBoundingBox();\r\n                //geoText.boundingBox.getCenter(text.position).multiplyScalar(-1);\r\n                //geoText.boundingBox.getCenter(text.position).multiplyScalar(-1);\r\n\r\n\r\n                //text.position.x = 50;\r\n                text.position.y = 230;\r\n                text.position.z = 100;\r\n                stall.add(text);\r\n\r\n                requestAnimationFrame(render);\r\n\r\n                function render(){\r\n\r\n                    text.rotation.y += 0.01;\r\n                    renderer.render(scene,camera);\r\n                    requestAnimationFrame(render);\r\n                }\r\n                renderer.render(scene,camera);\r\n            })\r\n        }\r\n\r\n\r\n        function makeStall(){\r\n\r\n            var stall = makeWall2();\r\n\r\n            var wall = makeWall();\r\n            wall.position.x = 200;\r\n            wall.position.z = 150;\r\n            wall.rotation.y = Math.PI/2;\r\n\r\n            var wall2 = makeWall();\r\n            wall2.position.x = -200;\r\n            wall2.position.z = 150;\r\n            wall2.rotation.y = Math.PI/2;\r\n\r\n            var roof = makeRoof();\r\n            roof.position.y = 185;\r\n            roof.position.z = 100;\r\n            roof.rotation.y = Math.PI/4;\r\n\r\n            var geo = new THREE.PlaneGeometry(1000,1000);\r\n            var mat = new THREE.MeshBasicMaterial({\r\n                color : 'gray'\r\n            });\r\n            var plane = new THREE.Mesh(geo,mat);\r\n            plane.position.y = -150;\r\n            //plane.position.x = -50;\r\n            plane.position.z = 200;\r\n            plane.rotation.x = -Math.PI/2;\r\n\r\n            stall.add(wall);\r\n            stall.add(wall2);\r\n            stall.add(roof);\r\n            stall.add(plane);\r\n\r\n            return stall;\r\n        }\r\n\r\n        function rotateStall(stall){\r\n\r\n            stall.position.y = 50;\r\n            stall.position.z = -300;\r\n            stall.rotation.y = -Math.PI/8;\r\n            stall.rotation.x = Math.PI/8;\r\n\r\n\r\n        }\r\n\r\n        function makeRoof(){\r\n\r\n            var geometry = new THREE.ConeGeometry(350,75,4);\r\n            var material = new THREE.MeshNormalMaterial();\r\n\r\n            return new THREE.Mesh(geometry,material);\r\n        }\r\n\r\n        function makeWall2(){\r\n\r\n            var geoWall = new THREE.CubeGeometry(400,300,10);\r\n            var matWall = new THREE.MeshNormalMaterial();\r\n\r\n            return new THREE.Mesh(geoWall,matWall);\r\n        }\r\n\r\n        function makeWall(){\r\n\r\n            var geoWall = new THREE.CubeGeometry(300,300,10);\r\n            var matWall = new THREE.MeshNormalMaterial();\r\n\r\n            return new THREE.Mesh(geoWall,matWall);\r\n        }\r\n\r\n\r\n        function doViewCheckbox() {\r\n            var run = document.getElementById(\"viewCheckbox\").checked;\r\n            if (run) {\r\n\r\n\r\n                camera.rotation.x = -Math.PI/2;\r\n                camera.rotation.z = Math.PI;\r\n                camera.position.x = -300;\r\n                camera.position.y = 3000;\r\n                camera.position.z = -100;\r\n\r\n                renderer.render(scene,camera);\r\n\r\n            }\r\n        }\r\n\r\n        function doRotateCheckbox() {\r\n            var run = document.getElementById(\"rotateCheckbox\").checked;\r\n            if (run) {\r\n\r\n                rotateStall(stall);\r\n                renderer.render(scene,camera);\r\n\r\n            }\r\n        }\r\n    </script>\r\n\r\n    <p>\r\n        <label><input type=\"checkbox\" id=\"viewCheckbox\" onclick=\"doViewCheckbox()\"><b>Birds Eye View</b></label>\r\n        <label><input type=\"checkbox\" id=\"rotateCheckbox\" onclick=\"doRotateCheckbox()\"><b>Angled View</b></label>\r\n\r\n    </p>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Stalls + Views/CGVProject.html	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Stalls + Views/CGVProject.html	(date 1589552560367)
@@ -10,7 +10,7 @@
             overflow: hidden;
         }
         canvas{
-            background: red;
+            background: #ff0000;
 
         }
 
@@ -20,7 +20,7 @@
 
     <canvas id = "myCanvas"></canvas>
 
-    <script src = "js/three.js"></script>
+    <script src = "../js/three.js"></script>
     <script>
 
 
Index: Shoot/Level1/Phys.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <title>SHOOT</title>\r\n    <script src=\"../../js/three.js\"></script>\r\n    <script src=\"../../js/physi.js\"></script>\r\n    <script src=\"../../js/GLTFLoader.js\"></script>\r\n    <script src=\"PhysiPlatform.js\"></script>\r\n    <script src=\"PhysiShoot.js\"></script>\r\n    <script src=\"PhysiAvatar.js\"></script>\r\n    <script src=\"PhysiMain.js\"></script>\r\n\r\n\r\n    <audio src=\"../../Resources/Textures/Dino/sound2.mp3\" id=\"raygun\"></audio>\r\n\r\n\r\n    <div id=\"viewport\"></div>\r\n    <script>\r\n        function init(){\r\n            renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n            renderer.setClearColor( 0x00a0a0 );\r\n            renderer.setPixelRatio( window.devicePixelRatio);\r\n            renderer.setSize( window.innerWidth-50, window.innerHeight-50);\r\n            renderer.shadowMap.enabled = true;\r\n            renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n            document.getElementById( 'viewport' ).appendChild( renderer.domElement );\r\n\r\n            setupScene();\r\n            setupEventHandlers();\r\n            createStallPlatform();\r\n            createAvatar();\r\n\r\n            render();\r\n        };\r\n    </script>\r\n\r\n</head>\r\n\r\n<body onload=\"init()\">\r\n</body>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Shoot/Level1/Phys.html	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Shoot/Level1/Phys.html	(date 1589648041016)
@@ -3,6 +3,7 @@
 
 <head>
     <title>SHOOT</title>
+
     <script src="../../js/three.js"></script>
     <script src="../../js/physi.js"></script>
     <script src="../../js/GLTFLoader.js"></script>
@@ -11,17 +12,15 @@
     <script src="PhysiAvatar.js"></script>
     <script src="PhysiMain.js"></script>
 
-
     <audio src="../../Resources/Textures/Dino/sound2.mp3" id="raygun"></audio>
 
-
     <div id="viewport"></div>
     <script>
         function init(){
             renderer = new THREE.WebGLRenderer( { antialias: true } );
             renderer.setClearColor( 0x00a0a0 );
             renderer.setPixelRatio( window.devicePixelRatio);
-            renderer.setSize( window.innerWidth-50, window.innerHeight-50);
+            renderer.setSize( window.innerWidth, window.innerHeight);
             renderer.shadowMap.enabled = true;
             renderer.shadowMap.type = THREE.PCFSoftShadowMap;
             document.getElementById( 'viewport' ).appendChild( renderer.domElement );
@@ -30,11 +29,11 @@
             setupEventHandlers();
             createStallPlatform();
             createAvatar();
+            setLevel(level);
 
             render();
         };
     </script>
-
 </head>
 
 <body onload="init()">
Index: Stalls + Views/MoonStall.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Carnival</title>\r\n\r\n    <style>\r\n        body{\r\n            margin:0;\r\n            overflow: hidden;\r\n        }\r\n        canvas{\r\n            background: red;\r\n\r\n        }\r\n\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n<canvas id = \"myCanvas\"></canvas>\r\n\r\n<script src = \"js/three.js\"></script>\r\n<script>\r\n\r\n\r\n\r\n    var renderer = new THREE.WebGLRenderer({canvas : document.getElementById('myCanvas'), antialias: true});\r\n    renderer.setClearColor(0x000000);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(window.innerWidth,window.innerHeight -50);\r\n\r\n    var camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1,4000);\r\n    camera.position.z = 1000;\r\n\r\n    var scene = new THREE.Scene();\r\n\r\n    var light = new THREE.AmbientLight(0xffffff,0.5);\r\n    scene.add(light);\r\n\r\n    var light1 = new THREE.PointLight(0xffffff,0.5);\r\n    scene.add(light1);\r\n\r\n    var textureLoader = new THREE.TextureLoader();\r\n\r\n    var stall = makeStall();\r\n    stall.position.z = -300;\r\n    makeMoon();\r\n\r\n\r\n    scene.add(stall);\r\n\r\n\r\n    requestAnimationFrame(render);\r\n\r\n    function render(){\r\n\r\n        //text.rotation.y += 0.01;\r\n        // Animating sphere 1\r\n\r\n        renderer.render(scene,camera);\r\n        requestAnimationFrame(render);\r\n    }\r\n\r\n    renderer.render(scene,camera);\r\n\r\n\r\n\r\n    function makeMoon(){\r\n\r\n        var moonGeo = new THREE.SphereGeometry(75,200,200);\r\n        var moonMat = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/moon7.jfif')});\r\n\r\n        var moon = new THREE.Mesh(moonGeo,moonMat);\r\n        moon.position.y = 300;\r\n        moon.position.z = 100;\r\n\r\n        stall.add(moon);\r\n\r\n        requestAnimationFrame(render);\r\n\r\n        function render(){\r\n\r\n            moon.rotation.y += 0.01;\r\n            renderer.render(scene,camera);\r\n            requestAnimationFrame(render);\r\n        }\r\n        renderer.render(scene,camera);\r\n\r\n    }\r\n\r\n\r\n    function makeStall(){\r\n\r\n        var stall = makeWall2();\r\n\r\n        var wall = makeWall();\r\n        wall.position.x = 200;\r\n        wall.position.z = 150;\r\n        wall.rotation.y = Math.PI/2;\r\n\r\n        var wall2 = makeWall();\r\n        wall2.position.x = -200;\r\n        wall2.position.z = 150;\r\n        wall2.rotation.y = Math.PI/2;\r\n\r\n        var roof = makeRoof();\r\n        roof.position.y = 185;\r\n        roof.position.z = 100;\r\n        roof.rotation.y = Math.PI/4;\r\n\r\n        var geo = new THREE.PlaneGeometry(1000,1000);\r\n        var mat = new THREE.MeshBasicMaterial({\r\n            color : 'gray'\r\n        });\r\n        var plane = new THREE.Mesh(geo,mat);\r\n        plane.position.y = -150;\r\n        //plane.position.x = -50;\r\n        plane.position.z = 200;\r\n        plane.rotation.x = -Math.PI/2;\r\n\r\n        stall.add(wall);\r\n        stall.add(wall2);\r\n        stall.add(roof);\r\n        stall.add(plane);\r\n\r\n        return stall;\r\n    }\r\n\r\n    function rotateStall(stall){\r\n\r\n        stall.position.y = 50;\r\n        stall.position.z = -300;\r\n        stall.rotation.y = -Math.PI/8;\r\n        stall.rotation.x = Math.PI/8;\r\n\r\n\r\n    }\r\n\r\n    function makeRoof(){\r\n\r\n        var geometry = new THREE.ConeGeometry(350,75,4);\r\n        var material = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/images.jfif')});\r\n\r\n        return new THREE.Mesh(geometry,material);\r\n    }\r\n\r\n    function makeWall2(){\r\n\r\n        var geoWall = new THREE.CubeGeometry(400,300,10);\r\n        var matWall = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/download2.png')});\r\n\r\n        return new THREE.Mesh(geoWall,matWall);\r\n    }\r\n\r\n    function makeWall(){\r\n\r\n        var geoWall = new THREE.CubeGeometry(300,300,10);\r\n        var matWall = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/download2.png')});\r\n\r\n        return new THREE.Mesh(geoWall,matWall);\r\n    }\r\n\r\n\r\n    function doViewCheckbox() {\r\n        var run = document.getElementById(\"viewCheckbox\").checked;\r\n        if (run) {\r\n\r\n\r\n            camera.rotation.x = -Math.PI/2;\r\n            camera.rotation.z = Math.PI;\r\n            camera.position.x = -300;\r\n            camera.position.y = 3000;\r\n            camera.position.z = -100;\r\n\r\n            renderer.render(scene,camera);\r\n\r\n        }\r\n    }\r\n\r\n    function doRotateCheckbox() {\r\n        var run = document.getElementById(\"rotateCheckbox\").checked;\r\n        if (run) {\r\n\r\n            rotateStall(stall);\r\n            renderer.render(scene,camera);\r\n\r\n        }\r\n    }\r\n</script>\r\n\r\n<p>\r\n    <label><input type=\"checkbox\" id=\"viewCheckbox\" onclick=\"doViewCheckbox()\"><b>Birds Eye View</b></label>\r\n    <label><input type=\"checkbox\" id=\"rotateCheckbox\" onclick=\"doRotateCheckbox()\"><b>Angled View</b></label>\r\n\r\n</p>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Stalls + Views/MoonStall.html	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Stalls + Views/MoonStall.html	(date 1589648960491)
@@ -20,7 +20,7 @@
 
 <canvas id = "myCanvas"></canvas>
 
-<script src = "js/three.js"></script>
+<script src = "../js/three.js"></script>
 <script>
 
 
@@ -69,7 +69,7 @@
     function makeMoon(){
 
         var moonGeo = new THREE.SphereGeometry(75,200,200);
-        var moonMat = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/moon7.jfif')});
+        var moonMat = new THREE.MeshBasicMaterial({ map : textureLoader.load('../Resources/Textures/Mikayla/moon7.jfif')});
 
         var moon = new THREE.Mesh(moonGeo,moonMat);
         moon.position.y = 300;
@@ -133,14 +133,12 @@
         stall.position.z = -300;
         stall.rotation.y = -Math.PI/8;
         stall.rotation.x = Math.PI/8;
-
-
     }
 
     function makeRoof(){
 
         var geometry = new THREE.ConeGeometry(350,75,4);
-        var material = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/images.jfif')});
+        var material = new THREE.MeshBasicMaterial({ map : textureLoader.load('../Resources/Textures/Mikayla/moon7.jfif')});
 
         return new THREE.Mesh(geometry,material);
     }
@@ -148,7 +146,7 @@
     function makeWall2(){
 
         var geoWall = new THREE.CubeGeometry(400,300,10);
-        var matWall = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/download2.png')});
+        var matWall = new THREE.MeshBasicMaterial({ map : textureLoader.load('../Resources/Textures/Mikayla/download2.png')});
 
         return new THREE.Mesh(geoWall,matWall);
     }
@@ -156,7 +154,7 @@
     function makeWall(){
 
         var geoWall = new THREE.CubeGeometry(300,300,10);
-        var matWall = new THREE.MeshBasicMaterial({ map : textureLoader.load('Resources/Textures/Mikayla/download2.png')});
+        var matWall = new THREE.MeshBasicMaterial({ map : textureLoader.load('../Resources/Textures/Mikayla/download2.png')});
 
         return new THREE.Mesh(geoWall,matWall);
     }
Index: Stalls + Views/perspectives.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>CGV Project Views</title>\r\n\r\n    <style>\r\n        body{\r\n            margin:0;\r\n            overflow: hidden;\r\n        }\r\n        canvas{\r\n            background: red;\r\n\r\n        }\r\n\r\n    </style>\r\n</head>\r\n<body>\r\n\r\n<canvas id = \"myCanvas\"></canvas>\r\n\r\n<script src = \"three.js\"></script>\r\n<script>\r\n\r\n\r\n\r\n    var renderer = new THREE.WebGLRenderer({canvas : document.getElementById('myCanvas'), antialias: true});\r\n    renderer.setClearColor(0x00ff00);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(window.innerWidth,window.innerHeight);\r\n\r\n    var camera1 = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1,4000);\r\n    camera1.position.z = 1000;\r\n\r\n    var camera2 = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1,4000);\r\n    camera2.position.y = 2000;\r\n    camera2.rotation.x = -Math.PI/2;\r\n\r\n    var camera3 = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1,4000);\r\n    camera3.position.x = 700;\r\n    camera3.position.y = 600;\r\n    camera3.position.z = 2000;\r\n    camera3.rotation.x = -Math.PI/15;\r\n    camera3.rotation.y = Math.PI/10;\r\n\r\n\r\n\r\n    var scene = new THREE.Scene();\r\n\r\n    var light = new THREE.AmbientLight(0xffffff,0.5);\r\n    scene.add(light);\r\n\r\n    var light1 = new THREE.PointLight(0xffffff,0.5);\r\n    scene.add(light1);\r\n\r\n\r\n    var boxGeo = new THREE.CubeGeometry(100,100,100);\r\n    var boxMat = new THREE.MeshNormalMaterial();\r\n\r\n    var box = new THREE.Mesh(boxGeo,boxMat);\r\n\r\n    var boxGeo1 = new THREE.CubeGeometry(50,50,50);\r\n    var boxMat1 = new THREE.MeshBasicMaterial({ color : 0xff0000 })\r\n\r\n    var box4 = new THREE.Mesh(boxGeo1,boxMat1);\r\n    box4.position.z = 300;\r\n\r\n\r\n    scene.add(box4);\r\n    scene.add(box);\r\n\r\n\r\n\r\n    var box2 = box.clone();\r\n    box2.position.x = -180;\r\n    box2.position.z = -180;\r\n\r\n    var box3 = box.clone();\r\n    box3.position.x = 180;\r\n    box3.position.z = 180;\r\n\r\n    var geo = new THREE.PlaneGeometry(1000,1000);\r\n    var mat = new THREE.MeshBasicMaterial({\r\n        color : 'gray'\r\n    });\r\n    var plane = new THREE.Mesh(geo,mat);\r\n    plane.position.y = -150;\r\n    //plane.position.x = -50;\r\n    plane.position.z = 200;\r\n    plane.rotation.x = -Math.PI/2;\r\n\r\n    scene.add(plane);\r\n    scene.add(box2);\r\n    scene.add(box3);\r\n\r\n\r\n    renderer.render(scene,camera1);\r\n\r\n    var count = 0;\r\n\r\n    document.onkeydown = function (e) {\r\n\r\n        if(e.keyCode == 86) {\r\n\r\n            console.log(\"86\");\r\n\r\n            var mod = count % 3;\r\n            switch (mod) {\r\n                case 0:\r\n                    doView1Checkbox();\r\n\r\n                    console.log(\"1\");\r\n                    break;\r\n\r\n                case 1:\r\n                    doView2Checkbox();\r\n\r\n                    console.log(\"2\");\r\n                    break;\r\n\r\n                case 2:\r\n                    doView3Checkbox();\r\n\r\n                    console.log(\"3\");\r\n                    break;\r\n\r\n            }\r\n            count += 1;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //requestAnimationFrame(render);\r\n\r\n    /*function render(){\r\n\r\n        //text.rotation.y += 0.01;\r\n        // Animating sphere 1\r\n\r\n        renderer.render(scene,camera);\r\n        requestAnimationFrame(render);\r\n    }*/\r\n\r\n    //renderer.render(scene,camera);\r\n\r\n\r\n    function doView1Checkbox() {\r\n        renderer.render(scene,camera2);\r\n       /* var run = document.getElementById(\"topCheckbox\").checked;\r\n        if (run) {\r\n            renderer.render(scene,camera2);\r\n\r\n            console.log(\"in 1\");\r\n        }*/\r\n    }\r\n\r\n    function doView2Checkbox() {\r\n\r\n        renderer.render(scene,camera1);\r\n       /* var run = document.getElementById(\"frontCheckbox\").checked;\r\n        if (run) {\r\n            renderer.render(scene,camera1);\r\n\r\n            console.log(\"in 2\");\r\n        }*/\r\n    }\r\n\r\n    function doView3Checkbox() {\r\n\r\n        renderer.render(scene,camera3);\r\n       /* var run = document.getElementById(\"sideCheckbox\").checked;\r\n        if (run) {\r\n            renderer.render(scene,camera3);\r\n\r\n            console.log(\"in 3\");\r\n        }*/\r\n    }\r\n\r\n</script>\r\n\r\n<p>\r\n   <!-- <label><input type=\"checkbox\" id=\"topCheckbox\" onclick=\"doView1Checkbox()\"><b>Birds Eye View</b></label>\r\n    <label><input type=\"checkbox\" id=\"frontCheckbox\" onclick=\"doView2Checkbox()\"><b>Front View</b></label>\r\n    <label><input type=\"checkbox\" id=\"sideCheckbox\" onclick=\"doView3Checkbox()\"><b>Side View</b></label>-->\r\n\r\n</p>\r\n\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Stalls + Views/perspectives.html	(revision 6fc8b4cd4b2244298a1c9c886c848a64ceca1847)
+++ Stalls + Views/perspectives.html	(date 1589487674795)
@@ -20,7 +20,7 @@
 
 <canvas id = "myCanvas"></canvas>
 
-<script src = "three.js"></script>
+<script src = "../js/three.js"></script>
 <script>
 
 
@@ -44,8 +44,6 @@
     camera3.rotation.x = -Math.PI/15;
     camera3.rotation.y = Math.PI/10;
 
-
-
     var scene = new THREE.Scene();
 
     var light = new THREE.AmbientLight(0xffffff,0.5);
