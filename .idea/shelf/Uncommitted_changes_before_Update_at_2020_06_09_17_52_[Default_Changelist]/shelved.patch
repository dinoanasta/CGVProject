Index: Shoot/Level1/Targets.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function createTargets() {\r\n    duckBox = new Physijs.BoxMesh( //physijs mesh for collision detection\r\n        new THREE.BoxGeometry(10, 10, 10),\r\n        new THREE.MeshStandardMaterial({\r\n            opacity: 0,\r\n            transparent: true,\r\n            // color: \"red\"\r\n            //map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/redfoil.jpg'),\r\n        }),\r\n        0\r\n    );\r\n    duckBox.setCcdMotionThreshold(10); //added to make balls travelling at fast velocities can collide with mesh\r\n    duckCoordinates = [ //target positions\r\n        new THREE.Vector3(0, 30, 0),    //0\r\n        new THREE.Vector3(0, 50, -70),    //1\r\n        new THREE.Vector3(30, 15, -70),    //2\r\n\r\n        new THREE.Vector3(25, 30, -40),   //3\r\n\r\n        new THREE.Vector3(25, 45, -70),   //4\r\n        new THREE.Vector3(25, 15, -70),   //5\r\n\r\n        new THREE.Vector3(-25, 30, -20),  //6\r\n\r\n        new THREE.Vector3(-25, 45, -70),  //7\r\n        new THREE.Vector3(-25, 15, -70)   //8\r\n    ];\r\n\r\n    for (let i = 0; i < 9; i++) { //adding physijs box mesh to an array\r\n        duckBoxArray.push(duckBox.clone());\r\n        duckBoxArray[i].position.set(duckCoordinates[i].x, duckCoordinates[i].y, duckCoordinates[i].z);\r\n        duckBoxArray[i].__dirtyPosition = true;\r\n        duckBoxArray[i].mass = 0;\r\n    }\r\n\r\n\r\n    if (level == \"1\") {\r\n\r\n        // duckBox = new Physijs.SphereMesh(\r\n        //     new THREE.BoxGeometry(10,10,10),\r\n        //     new THREE.MeshStandardMaterial({\r\n        //         opacity: 0,\r\n        //         transparent: true,\r\n        //         // color: \"red\"\r\n        //         //map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/redfoil.jpg'),\r\n        //     }),\r\n        //     0\r\n        // );\r\n        // duckBox.setCcdMotionThreshold(10);\r\n        // duckCoordinates = [\r\n        //     new THREE.Vector3(0, 30, -70),    //0\r\n        //     new THREE.Vector3(0, 50, -70),    //1\r\n        //     new THREE.Vector3(0, 15, -70),    //2\r\n        //     new THREE.Vector3(25, 30, -70),   //3\r\n        //     new THREE.Vector3(25, 45, -70),   //4\r\n        //     new THREE.Vector3(25, 15, -70),   //5\r\n        //     new THREE.Vector3(-25, 30, -70),  //6\r\n        //     new THREE.Vector3(-25, 45, -70),  //7\r\n        //     new THREE.Vector3(-25, 15, -70)   //8\r\n        // ];\r\n\r\n        // for (let i = 0; i < 9; i++) {\r\n        //     duckBoxArray.push(duckBox.clone());\r\n        //     duckBoxArray[i].position.set(duckCoordinates[i].x, duckCoordinates[i].y, duckCoordinates[i].z);\r\n        // }\r\n\r\n        //duck.setCcdSweptSphereRadius(3);\r\n\r\n        loader.load( //loading respective model for respective level\r\n            \"../../Models/ufo/scene.gltf\",\r\n            function (object) {\r\n                object.scene.traverse(function (object) {\r\n                    if (object.isMesh) {\r\n                        object.castShadow = true;\r\n                    }\r\n                });\r\n\r\n                realDuckModel = object.scene.children[0];\r\n                realDuckModel.scale.set(0.025, 0.025, 0.025);\r\n\r\n                for (let i = 0; i < 9; i++) { //assigning coordinates and adding to scene :)\r\n                    realDuckModel.position.set(duckCoordinates[i].x, duckCoordinates[i].y, duckCoordinates[i].z);\r\n                    realDuckModelArray.push(realDuckModel.clone());\r\n\r\n                    scene.add(duckBoxArray[i]);\r\n                    scene.add(realDuckModelArray[i]);\r\n                }\r\n\r\n            }\r\n        );\r\n    } else if (level == \"2\") {\r\n        // duckBox = new Physijs.BoxMesh(\r\n        //     new THREE.BoxGeometry(10, 10, 10),\r\n        //     new THREE.MeshStandardMaterial({\r\n        //         opacity: 0,\r\n        //         transparent: true,\r\n        //         // color: \"red\"\r\n        //         //map: new THREE.TextureLoader().load('../../Resources/Textures/Dino/redfoil.jpg'),\r\n        //     }),\r\n        //     0\r\n        // );\r\n        // duckBox.setCcdMotionThreshold(10);\r\n        // duckCoordinates = [\r\n        //     new THREE.Vector3(0, 30, -70),    //0\r\n        //     new THREE.Vector3(0, 50, -70),    //1\r\n        //     new THREE.Vector3(0, 15, -70),    //2\r\n        //     new THREE.Vector3(25, 30, -70),   //3\r\n        //     new THREE.Vector3(25, 45, -70),   //4\r\n        //     new THREE.Vector3(25, 15, -70),   //5\r\n        //     new THREE.Vector3(-25, 30, -70),  //6\r\n        //     new THREE.Vector3(-25, 45, -70),  //7\r\n        //     new THREE.Vector3(-25, 15, -70)   //8\r\n        // ];\r\n\r\n        // for (let i = 0; i < 9; i++) {\r\n        //     duckBoxArray.push(duckBox.clone());\r\n        //     duckBoxArray[i].position.set(duckCoordinates[i].x, duckCoordinates[i].y, duckCoordinates[i].z);\r\n        // }\r\n\r\n        //duck.setCcdSweptSphereRadius(3);\r\n\r\n        loader.load( //loading respective model for respective level\r\n            \"../../Models/plush/scene.gltf\",\r\n            function (object) {\r\n                object.scene.traverse(function (object) {\r\n                    if (object.isMesh) {\r\n                        object.castShadow = true;\r\n                    }\r\n                });\r\n\r\n                realDuckModel = object.scene.children[0];\r\n                // duckModel.rotation.y=Math.Pi;\r\n                realDuckModel.scale.set(0.3, 0.3, 0.3);\r\n\r\n                for (let i = 0; i < 9; i++) { //assigning coordinates and adding to scene :)\r\n                    realDuckModel.position.set(duckCoordinates[i].x, duckCoordinates[i].y, duckCoordinates[i].z);\r\n                    realDuckModelArray.push(realDuckModel.clone());\r\n\r\n                    scene.add(duckBoxArray[i]);\r\n                    scene.add(realDuckModelArray[i]);\r\n                }\r\n            }\r\n        );\r\n    } else if (level == \"3\") {\r\n\r\n\r\n        //duck.setCcdSweptSphereRadius(3);\r\n\r\n        loader.load( //loading respective model for respective level\r\n            \"../../Models/rocket2/scene.gltf\",\r\n            function (object) {\r\n                object.scene.traverse(function (object) {\r\n                    if (object.isMesh) {\r\n                        object.castShadow = true;\r\n                    }\r\n                });\r\n\r\n                realDuckModel = object.scene.children[0];\r\n                realDuckModel.rotation.x = Math.PI;\r\n                realDuckModel.scale.set(3, 3, 3);\r\n\r\n                for (let i = 0; i < 9; i++) { //assigning coordinates and adding to scene :)\r\n                    realDuckModel.position.set(duckCoordinates[i].x, duckCoordinates[i].y, duckCoordinates[i].z);\r\n                    realDuckModelArray.push(realDuckModel.clone());\r\n                    realDuckModelArray[i].position.set(duckCoordinates[i].x, duckCoordinates[i].y, duckCoordinates[i].z);\r\n\r\n                    scene.add(duckBoxArray[i]);\r\n                    scene.add(realDuckModelArray[i]);\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nfunction configureTargetCollisions() { //collision detection of targets with balls\r\n    for (let i = 0; i < 9; i++) {\r\n        duckBoxArray[i].addEventListener('collision', function (other_object) {\r\n            if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n                beenHit = true;\r\n                hitSound = document.getElementById(\"boom\");\r\n                hitSound.play();\r\n\r\n                scene.remove(duckBoxArray[i]);\r\n                scene.remove(realDuckModelArray[i]);\r\n                score++;\r\n                document.getElementById(\"scoreValue\").textContent = score;\r\n                if (score == goal) {\r\n                    decideOutcome();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // duckBoxArray[0].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //\r\n    //         scene.remove(duckBoxArray[0]);\r\n    //         scene.remove(realDuckModelArray[0]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[1].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[1]);\r\n    //         scene.remove(realDuckModelArray[1]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[2].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[2]);\r\n    //         scene.remove(realDuckModelArray[2]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[3].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[3]);\r\n    //         scene.remove(realDuckModelArray[3]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[4].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[4]);\r\n    //         scene.remove(realDuckModelArray[4]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[5].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[5]);\r\n    //         scene.remove(realDuckModelArray[5]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[6].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[6]);\r\n    //         scene.remove(realDuckModelArray[6]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[7].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[7]);\r\n    //         scene.remove(realDuckModelArray[7]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    //\r\n    // duckBoxArray[8].addEventListener('collision', function (other_object) {\r\n    //     if (playing && other_object == shotBalls[numBallsShot - 1] && !beenHit) {\r\n    //         beenHit = true;\r\n    //         hitSound = document.getElementById(\"boom\");\r\n    //         hitSound.play();\r\n    //         scene.remove(duckBoxArray[8]);\r\n    //         scene.remove(realDuckModelArray[8]);\r\n    //         score++;\r\n    //         document.getElementById(\"scoreValue\").textContent = score;\r\n    //         if (score == goal) {\r\n    //             decideOutcome();\r\n    //         }\r\n    //     }\r\n    // });\r\n    // // }\r\n}\r\n\r\nfunction deleteTargets() { //deletion of targets\r\n    duckCoordinates = [];\r\n    realDuckModelArray = [];\r\n    duckBoxArray = [];\r\n}\r\n\r\nfunction circleTargetsAnimation() {\r\n    realDuckModelArray[0].rotation.x += 0.1;\r\n    realDuckModelArray[0].position.x = -20 * Math.cos(2 * degrees / ((180 / Math.PI)));\r\n    realDuckModelArray[0].position.y = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 30;\r\n    // console.log('x:' + realDuckModelArray[0].position.x + '\\ny:' + realDuckModelArray[0].position.y);\r\n\r\n    realDuckModelArray[3].rotation.x += 0.1;\r\n    realDuckModelArray[3].position.x = -20 * Math.cos(1 * degrees / ((180 / Math.PI)));\r\n    realDuckModelArray[3].position.y = -20 * Math.sin(1 * degrees / ((180 / Math.PI))) + 30;\r\n    // console.log('x:' + realDuckModelArray[3].position.x + '\\ny:' + realDuckModelArray[3].position.y);\r\n\r\n    realDuckModelArray[6].rotation.x += 0.1;\r\n    realDuckModelArray[6].position.x = -20 * Math.cos(3 * degrees / ((180 / Math.PI)));\r\n    realDuckModelArray[6].position.y = -20 * Math.sin(3 * degrees / ((180 / Math.PI))) + 30;\r\n    // console.log('x:' + realDuckModelArray[6].position.x + '\\ny:' + realDuckModelArray[6].position.y);\r\n\r\n    ////top animations\r\n    realDuckModelArray[1].rotation.x += 0.1;\r\n    realDuckModelArray[1].position.x = -20 * Math.cos(1 * degrees / ((180 / Math.PI)));\r\n    realDuckModelArray[1].position.z = -20 * Math.sin(1 * degrees / ((180 / Math.PI))) + 40;\r\n    // console.log('x:' + realDuckModelArray[1].position.x + '\\ny:' + realDuckModelArray[1].position.y);\r\n\r\n    realDuckModelArray[4].rotation.x += 0.1;\r\n    realDuckModelArray[4].position.x = -20 * Math.cos(2 * degrees / ((180 / Math.PI)));\r\n    realDuckModelArray[4].position.z = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) - 40;\r\n    // console.log('x:' + realDuckModelArray[1].position.x + '\\ny:' + realDuckModelArray[1].position.y);\r\n\r\n    realDuckModelArray[7].rotation.x += 0.1;\r\n    realDuckModelArray[7].position.x = -20 * Math.cos(3 * degrees / ((180 / Math.PI)));\r\n    realDuckModelArray[7].position.z = -20 * Math.sin(3 * degrees / ((180 / Math.PI))) - 70;\r\n    // console.log('x:' + realDuckModelArray[1].position.x + '\\ny:' + realDuckModelArray[1].position.y);\r\n\r\n    realDuckModelArray[2].rotation.x+=0.05;\r\n}\r\n\r\n\r\nfunction moveBackTargetsAnimation() {\r\n    //index 5 & 8\r\n    realDuckModelArray[5].position.z -= 3.5;\r\n    realDuckModelArray[5].rotation.z -= 0.5;\r\n    realDuckModelArray[8].position.z -= 3.5;\r\n    realDuckModelArray[8].rotation.z += 0.5;\r\n}\r\n\r\nfunction moveForwardTargetsAnimation() {\r\n    //index 5 & 8\r\n    realDuckModelArray[5].position.z += 3.5;\r\n    realDuckModelArray[5].rotation.z -= 0.5;\r\n    realDuckModelArray[8].position.z += 3.5;\r\n    realDuckModelArray[8].rotation.z += 0.5;\r\n}\r\n\r\nfunction moveLeftTargetsAnimation() {\r\n    //index 5 & 8\r\n    realDuckModelArray[2].position.x -= 2;\r\n}\r\n\r\nfunction moveRightTargetsAnimation() {\r\n    //index 5 & 8\r\n    realDuckModelArray[2].position.x += 2;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Shoot/Level1/Targets.js	(revision 0150a978a6ddac15afecf84779e1647178d3a13e)
+++ Shoot/Level1/Targets.js	(date 1591717181600)
@@ -11,19 +11,24 @@
     );
     duckBox.setCcdMotionThreshold(10); //added to make balls travelling at fast velocities can collide with mesh
     duckCoordinates = [ //target positions
-        new THREE.Vector3(0, 30, 0),    //0
+
+        //Centre
+        new THREE.Vector3(0, 30, -70),    //0
         new THREE.Vector3(0, 50, -70),    //1
-        new THREE.Vector3(30, 15, -70),    //2
 
+        new THREE.Vector3(30, 15, -70),    //2 - back
+
+        //Right
         new THREE.Vector3(25, 30, -40),   //3
-
         new THREE.Vector3(25, 45, -70),   //4
-        new THREE.Vector3(25, 15, -70),   //5
 
-        new THREE.Vector3(-25, 30, -20),  //6
+        new THREE.Vector3(25, 15, -70),   //5 - bottom left/right
 
+        //Left
+        new THREE.Vector3(-25, 30, -40),  //6
         new THREE.Vector3(-25, 45, -70),  //7
-        new THREE.Vector3(-25, 15, -70)   //8
+
+        new THREE.Vector3(-25, 15, -70)   //8 - bottom left/right
     ];
 
     for (let i = 0; i < 9; i++) { //adding physijs box mesh to an array
@@ -336,55 +341,65 @@
 }
 
 function circleTargetsAnimation() {
-    realDuckModelArray[0].rotation.x += 0.1;
-    realDuckModelArray[0].position.x = -20 * Math.cos(2 * degrees / ((180 / Math.PI)));
-    realDuckModelArray[0].position.y = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 30;
-    // console.log('x:' + realDuckModelArray[0].position.x + '\ny:' + realDuckModelArray[0].position.y);
+
+    //Centre ducks
+
+    realDuckModelArray[0].rotation.y += 0.1;
+    realDuckModelArray[0].position.x = 20 * Math.cos(3 * degrees / ((180 / Math.PI)));
+    realDuckModelArray[0].position.y = -20 * Math.sin( 3 * degrees / ((180 / Math.PI))) + 30;
+
+    realDuckModelArray[1].rotation.y -= 0.1;
+    realDuckModelArray[1].position.x = -20 * Math.cos(3 * degrees / ((180 / Math.PI)));
+    realDuckModelArray[1].position.y = -20 * Math.sin(3 * degrees / ((180 / Math.PI))) + 30;
+
+
+    //Right ducks
+
+    realDuckModelArray[3].rotation.y -= 0.1;
+    realDuckModelArray[3].position.x = 20 * Math.cos(2 * degrees / ((180 / Math.PI))) + 5;
+    realDuckModelArray[3].position.y = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 40;
+    realDuckModelArray[3].position.z = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) - 30;
 
-    realDuckModelArray[3].rotation.x += 0.1;
-    realDuckModelArray[3].position.x = -20 * Math.cos(1 * degrees / ((180 / Math.PI)));
-    realDuckModelArray[3].position.y = -20 * Math.sin(1 * degrees / ((180 / Math.PI))) + 30;
-    // console.log('x:' + realDuckModelArray[3].position.x + '\ny:' + realDuckModelArray[3].position.y);
+    realDuckModelArray[4].rotation.y -= 0.1;
+    realDuckModelArray[4].position.x = 20 * Math.cos(2 * degrees / ((180 / Math.PI))) + 20 ;
+    realDuckModelArray[4].position.y = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 30;
+    realDuckModelArray[4].position.z = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 30;
 
-    realDuckModelArray[6].rotation.x += 0.1;
-    realDuckModelArray[6].position.x = -20 * Math.cos(3 * degrees / ((180 / Math.PI)));
-    realDuckModelArray[6].position.y = -20 * Math.sin(3 * degrees / ((180 / Math.PI))) + 30;
-    // console.log('x:' + realDuckModelArray[6].position.x + '\ny:' + realDuckModelArray[6].position.y);
 
-    ////top animations
-    realDuckModelArray[1].rotation.x += 0.1;
-    realDuckModelArray[1].position.x = -20 * Math.cos(1 * degrees / ((180 / Math.PI)));
-    realDuckModelArray[1].position.z = -20 * Math.sin(1 * degrees / ((180 / Math.PI))) + 40;
-    // console.log('x:' + realDuckModelArray[1].position.x + '\ny:' + realDuckModelArray[1].position.y);
+    //Left ducks
 
-    realDuckModelArray[4].rotation.x += 0.1;
-    realDuckModelArray[4].position.x = -20 * Math.cos(2 * degrees / ((180 / Math.PI)));
-    realDuckModelArray[4].position.z = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) - 40;
-    // console.log('x:' + realDuckModelArray[1].position.x + '\ny:' + realDuckModelArray[1].position.y);
+    realDuckModelArray[6].rotation.y += 0.1;
+    realDuckModelArray[6].position.x = -20 * Math.cos(2 * degrees / ((180 / Math.PI))) - 5;
+    realDuckModelArray[6].position.y = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 40;
+    realDuckModelArray[6].position.z = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) - 30;
 
-    realDuckModelArray[7].rotation.x += 0.1;
-    realDuckModelArray[7].position.x = -20 * Math.cos(3 * degrees / ((180 / Math.PI)));
-    realDuckModelArray[7].position.z = -20 * Math.sin(3 * degrees / ((180 / Math.PI))) - 70;
-    // console.log('x:' + realDuckModelArray[1].position.x + '\ny:' + realDuckModelArray[1].position.y);
 
-    realDuckModelArray[2].rotation.x+=0.05;
+    realDuckModelArray[7].rotation.y += 0.1;
+    realDuckModelArray[7].position.x = -20 * Math.cos(2 * degrees / ((180 / Math.PI))) - 20;
+    realDuckModelArray[7].position.y = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 30;
+    realDuckModelArray[7].position.z = -20 * Math.sin(2 * degrees / ((180 / Math.PI))) + 30;
+
+
+
+    realDuckModelArray[2].rotation.z+=0.05;
+
 }
 
 
 function moveBackTargetsAnimation() {
     //index 5 & 8
     realDuckModelArray[5].position.z -= 3.5;
-    realDuckModelArray[5].rotation.z -= 0.5;
+    realDuckModelArray[5].rotation.z -= 0.1;
     realDuckModelArray[8].position.z -= 3.5;
-    realDuckModelArray[8].rotation.z += 0.5;
+    realDuckModelArray[8].rotation.z += 0.1;
 }
 
 function moveForwardTargetsAnimation() {
     //index 5 & 8
     realDuckModelArray[5].position.z += 3.5;
-    realDuckModelArray[5].rotation.z -= 0.5;
+    realDuckModelArray[5].rotation.z -= 0.1;
     realDuckModelArray[8].position.z += 3.5;
-    realDuckModelArray[8].rotation.z += 0.5;
+    realDuckModelArray[8].rotation.z += 0.1;
 }
 
 function moveLeftTargetsAnimation() {
Index: Bonus Level/bonusMain.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Physijs.scripts.worker = '../js/physijs_worker.js';\r\nPhysijs.scripts.ammo = '../js/ammo.js';\r\n\r\nvar render, renderer, scene, camera, skybox, crosshair1, crosshair2, bullet, controls, newBullet, physicsTargets;\r\nvar camLight;  // A light shining from the direction of the camera; moves with the camera.\r\n\r\nvar points = 0;\r\nvar duck;\r\nvar duckGroup = new THREE.Group();\r\nvar duckArray = [new THREE.Mesh(), new THREE.Mesh(), new THREE.Mesh(), new THREE.Mesh(), new THREE.Mesh(), new THREE.Mesh(), new THREE.Mesh(), new THREE.Mesh(), new THREE.Mesh()];\r\nvar pos = new THREE.Vector3();\r\nvar frameNumber = 0;\r\nvar raycaster = new THREE.Raycaster();\r\nvar mouse = new THREE.Vector2();\r\nvar mouseCoords = new THREE.Vector2()\r\n\r\nvar loader = new THREE.GLTFLoader();\r\n\r\nvar ducksKilled = 0;\r\n\r\nvar coordinates = [\r\n    new THREE.Vector3(0, 0, 250),\r\n    new THREE.Vector3(200, 0, 250),\r\n    new THREE.Vector3(-200, 0, 250),\r\n    new THREE.Vector3(400, 0, 250),\r\n    new THREE.Vector3(-400, 0, 250),\r\n    new THREE.Vector3(0, 200, 250),\r\n    new THREE.Vector3(0, -200, 250),\r\n    new THREE.Vector3(0, 400, 250),\r\n    new THREE.Vector3(0, -400, 250)\r\n];\r\n\r\n//Dino Variables\r\nlet timeLeft;\r\nlet playing;\r\nlet countdown;\r\nlet totalScore = 0;\r\n\r\nfunction setupScene(){\r\n    scene = new Physijs.Scene;\r\n    scene.setGravity(new THREE.Vector3(0, 0, 0));\r\n\r\n    camera = new THREE.PerspectiveCamera(\r\n        55,\r\n        window.innerWidth / window.innerHeight,\r\n        45,\r\n        3000\r\n    );\r\n    camera.position.set(0, 0, -250);\r\n\r\n    camLight = new THREE.DirectionalLight();\r\n    camLight.position.set(-100, 100, 1);\r\n\r\n    camera.add(camLight);\r\n    scene.add(camera);\r\n\r\n    //Orbit controls\r\n    controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    // controls.enableZoom = true;\r\n    // controls.enableRotate = true;\r\n    // controls.mouseButtons = {\r\n    //     MIDDLE: THREE.MOUSE.DOLLY,\r\n    //     RIGHT: THREE.MOUSE.ROTATE,\r\n    //     LEFT: THREE.MOUSE.PAN\r\n    // }\r\n\r\n    //Skybox\r\n    const materialArray = [];\r\n    const texture_ft = new THREE.TextureLoader().load('../Resources/Cubemaps/bonus1/right.png');\r\n    const texture_bk = new THREE.TextureLoader().load('../Resources/Cubemaps/bonus1/left.png');\r\n    const texture_up = new THREE.TextureLoader().load('../Resources/Cubemaps/bonus1/top.png');\r\n    const texture_dn = new THREE.TextureLoader().load('../Resources/Cubemaps/bonus1/bottom.png');\r\n    const texture_rt = new THREE.TextureLoader().load('../Resources/Cubemaps/bonus1/front.png');\r\n    const texture_lf = new THREE.TextureLoader().load('../Resources/Cubemaps/bonus1/back.png');\r\n    materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }));\r\n    materialArray.push(new THREE.MeshBasicMaterial({ map: texture_bk }));\r\n    materialArray.push(new THREE.MeshBasicMaterial({ map: texture_up }));\r\n    materialArray.push(new THREE.MeshBasicMaterial({ map: texture_dn }));\r\n    materialArray.push(new THREE.MeshBasicMaterial({ map: texture_rt }));\r\n    materialArray.push(new THREE.MeshBasicMaterial({ map: texture_lf }));\r\n    for (let i = 0; i < 6; i++) {\r\n        materialArray[i].side = THREE.BackSide;\r\n    }\r\n\r\n    skybox = new THREE.Mesh(\r\n        new THREE.BoxGeometry(1000, 1000, 1000),\r\n        materialArray,\r\n        0\r\n    );\r\n    scene.add(skybox);\r\n\r\n    //Crosshair\r\n    crosshair1 = new THREE.Mesh(\r\n        new THREE.CubeGeometry(50, 1, 1),\r\n        new THREE.MeshBasicMaterial({ color: 0xff0000 }),\r\n        0\r\n    );\r\n    crosshair1.position.set(0, 0, 0);\r\n\r\n    crosshair2 = crosshair1.clone(true);\r\n    crosshair2.rotation.z = Math.PI / 2;\r\n\r\n    scene.add(crosshair1);\r\n    scene.add(crosshair2);\r\n}\r\n\r\n\r\nfunction startPlaying(){\r\n    document.getElementById(\"GameHUD\").style.visibility = 'visible';\r\n    document.getElementById(\"preGameHUD\").style.visibility = 'hidden';\r\n\r\n    playing = true;\r\n    controls.update();\r\n\r\n    setupTimer();\r\n}\r\n\r\nfunction setupTimer(){\r\n    //Timer\r\n    let length = 5;\r\n\r\n    document.getElementById(\"timeValue\").textContent = length;\r\n\r\n    setTimeout( function(){\r\n            timeLeft = length;\r\n            countdown = setInterval(function() {\r\n                timeLeft--;\r\n                document.getElementById(\"timeValue\").textContent = timeLeft;\r\n                if (timeLeft <= 0){\r\n                    clearInterval(countdown);\r\n                    gameOver();\r\n                }\r\n            },1000);\r\n        },\r\n        1000\r\n    );\r\n}\r\n\r\nfunction gameOver(){\r\n    document.getElementById(\"GameHUD\").style.visibility = 'hidden';\r\n    document.getElementById(\"postGameHUD\").style.visibility = 'visible';\r\n\r\n    document.getElementById(\"gameOverText\").textContent = 'Final score: ' + totalScore;\r\n}\r\n\r\nfunction setupEventHandlers() {\r\n    window.addEventListener('keydown', handleKeyDown, false);\r\n    window.addEventListener('keyup', handleKeyUp, false);\r\n    window.addEventListener('mousemove', onMouseMove, false);\r\n    window.addEventListener('resize', onWindowResize, false);\r\n\r\n    document.getElementById(\"playButton\").onclick = startPlaying;\r\n}\r\n\r\nfunction onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction onMouseMove(event) {\r\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\r\n}\r\n\r\nfunction handleKeyUp(event){\r\n    if (event.code == 'Space') {\r\n        //console.log('Space release')\r\n        //scene.remove(bullet);\r\n    }\r\n}\r\n\r\nfunction handleKeyDown(event){\r\n    if (event.code == 'Space') {\r\n        //console.log('Space in');\r\n\r\n        mouseCoords.set(\r\n            mouse.x * 0.005,\r\n            mouse.y * 0.005\r\n        );\r\n\r\n        raycaster.setFromCamera(mouseCoords, camera);\r\n\r\n        bullet = new Physijs.SphereMesh(\r\n            new THREE.SphereGeometry(5, 8, 8),\r\n            new THREE.MeshLambertMaterial({ color: 0x00ff00 }),\r\n            1\r\n        );\r\n        bullet.__dirtyPosition = true;\r\n        bullet.setCcdMotionThreshold(1);\r\n        bullet.setCcdSweptSphereRadius(0.2);\r\n        bullet.position.copy(raycaster.ray.direction);\r\n        bullet.position.add(raycaster.ray.origin);\r\n\r\n        //bullet.setCcdSweptSphereRadius(0.2);\r\n        //bullet.setCcdMotionThreshold(1);\r\n        scene.add(bullet);\r\n        pos.copy(raycaster.ray.direction);\r\n        pos.multiplyScalar(250);\r\n        bullet.setLinearVelocity(new THREE.Vector3(pos.x * 8, pos.y * 8, pos.z * 8));\r\n    }\r\n}\r\n\r\nfunction render() {\r\n    // render the scene\r\n    raycaster.setFromCamera(mouseCoords, camera);\r\n\r\n    crosshair1.rotation.z += 0.05;\r\n    crosshair1.rotation.x += 0.05;\r\n    crosshair2.rotation.z += 0.05;\r\n\r\n    for (var i = 0; i < 9; i++) {\r\n        duckArray[i].rotation.y += 0.1;\r\n        duckArray[i].rotation.x += 0.1;\r\n    }\r\n\r\n    skybox.rotation.x -= 0.01;\r\n    skybox.rotation.y += 0.05;\r\n    skybox.rotation.z += 0.1;\r\n    frameNumber++;\r\n\r\n    requestAnimationFrame(render);\r\n    scene.simulate();\r\n    controls.update();\r\n    renderer.render(scene, camera);\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Bonus Level/bonusMain.js	(revision 0150a978a6ddac15afecf84779e1647178d3a13e)
+++ Bonus Level/bonusMain.js	(date 1591703776561)
@@ -57,6 +57,7 @@
     //Orbit controls
     controls = new THREE.OrbitControls(camera, renderer.domElement);
     controls.enableDamping = true;
+    controls.enabled = true;
     // controls.enableZoom = true;
     // controls.enableRotate = true;
     // controls.mouseButtons = {
